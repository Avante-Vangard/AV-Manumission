// Manumission 1707 - Production 1.0
// This script should convert most clean e.SFM files into a usable IDtag file.
// Note that CLEAN means incoming files are:
// 1. UTF-8 with unix line endings. Other encodings are not verified, but might have success. The script depends heavily on the \n symbol, though, so it is likely that text to be converted needs to change to unix line endings at a minimum. 
// 2. Every row of text begins with a PARAGRAPH or verse marker. (that is, no return characters that are not followed with a paragraph tag, except possibly the end of file.)
// Note that e.SFM is a subset/superset of USFM 2.4, with compatibility to some USFM 3.0 enhancements, but not all. Figures, and word tagging are not supported, and embedded tagging is not supported. 
// ==== Known Issues ====
// - | This version supports USFM 2.4 except 
//    | - embedded tags. embedded tags will be tagged but the tags that span them are not supported
// - | no table support. Each cell becomes a character style. 
// - | not supporting early \cl in Manumission.
// - | no special support for official periph suffixes.
// - | This versions supports USFM 3.0 except 
// - | no support for character style affixes (\w | ) 
// - | figures remain supported as in 2.4 
// ============================================
// ===                   PRESOAK CYCLE                            ===
// ============================================
// ============ Character Substitutions ========================
// -- add return at 'id' tag if needed (so combined files start on new lines)
// -- just in case  'cat *.sfm' > bigfile.sfm was used on a dirty file (no ending linebreak). would be required where a single output file is expected rather than per book, like run-in bible books. 
SearchAndReplace.setSearchString("(\\.)\\\\id");
SearchAndReplace.setReplaceString("$1\\n\\\\id");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setWholeWord(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);
//=
/* -- change \f +\- markers to superscript (indesign bug)
SearchAndReplace.setSearchString("\\\\f \\+");
SearchAndReplace.setReplaceString("\\\\f ⁺");
SearchAndReplace.replaceAll(view); */
//=
SearchAndReplace.setSearchString("\\\\f \\-");
SearchAndReplace.setReplaceString("\\\\f ⁻");
SearchAndReplace.replaceAll(view);
// ==================================
// ===    USFM to IDTag Conversion  ===
// ==================================
// ==== SPECIAL Conversions ================
// === Chapter markers rearranged to their published order. ========
// -- \cp replaces \c
SearchAndReplace.setSearchString("(^\\\\c )(.+$)\\n(\\\\cp )(.+$)");
SearchAndReplace.setReplaceString("$3$2\n$1$4");
SearchAndReplace.replaceAll(view);
// -- not supporting early \cl in Manumission. Manual convert to late \cl is prerequisite
// -- late \cl moves before \c (character style)
SearchAndReplace.setSearchString("(^\\\\c)( .+$\\n)(\\\\cl *.*$)");
SearchAndReplace.setReplaceString("$1p$2$3");
SearchAndReplace.replaceAll(view);
// -Move major sections in front of dropcap chaps and labelled chapters.  
SearchAndReplace.setSearchString("(^\\\\c .+$\\n|^\\\\cl .+$\\n)(\\\\ms.+$\\n)");
SearchAndReplace.setReplaceString("$2$1");
SearchAndReplace.replaceAll(view);
//-- move sections in front of dropcap chapters
SearchAndReplace.setSearchString("(^\\\\c .+$\\n)(\\\\s.+$\\n)");
SearchAndReplace.setReplaceString("$2$1");
SearchAndReplace.replaceAll(view);
//- move references up 
SearchAndReplace.setSearchString("(^\\\\c .+$\\n)(\\\\r.+$\\n)");
SearchAndReplace.setReplaceString("$2$1");
SearchAndReplace.replaceAll(view);
//- move directives up
SearchAndReplace.setSearchString("(^\\\\c .+$\\n)(\\\\d.+$\\n)");
SearchAndReplace.setReplaceString("$2$1");
SearchAndReplace.replaceAll(view);
//- make first paragraph part of paragraph c
SearchAndReplace.setSearchString("(^\\\\c .+$)\\n\\\\[^ ]+ ");
SearchAndReplace.setReplaceString("$1");
SearchAndReplace.replaceAll(view);
textArea.goToBufferStart(false);
//- (delete verse 1 after dropcap Chapter numbers.) 
SearchAndReplace.setSearchString("(^\\\\c .+?)\\\\v 1[ |\\-][0-9 ]*");
SearchAndReplace.setReplaceString("$1");
SearchAndReplace.replaceAll(view);
textArea.goToBufferStart(false);
//- wrap character style cn around chapter digits for header variable
SearchAndReplace.setSearchString("(^\\\\c ) *([0-9]+)");
SearchAndReplace.setReplaceString("$1\\\\cn $2    \\\\cn\\*");
SearchAndReplace.replaceAll(view);
// === Verse markers rearranged to their published order. ==========
// -- returns before \v
SearchAndReplace.setSearchString("\\n(\\\\v)");
SearchAndReplace.setReplaceString(" $1");
SearchAndReplace.replaceAll(view);
// -- \vp replaces \v
SearchAndReplace.setSearchString("(\\\\v )([^ ]+) (\\\\vp )([^ ]+) ");
SearchAndReplace.setReplaceString("$1$4 $3$2");
SearchAndReplace.replaceAll(view);
// -- space after \fv and \v
// SearchAndReplace.setSearchString("(\\\\fv|\\\\v) ");
// SearchAndReplace.setReplaceString(" $1 ");
// SearchAndReplace.setBeanShellReplace(false);
// SearchAndReplace.setWholeWord(false);
// SearchAndReplace.setIgnoreCase(false);
// SearchAndReplace.setRegexp(true);
// SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
// SearchAndReplace.replaceAll(view);
// ==== verse numbers in poetry shift out of the margin =================
// -- prepend 3 figure spaces to \v after \q 
SearchAndReplace.setSearchString("^(\\\\q[^ ]* \\\\v )([0-9\\-][0-9\\-][0-9\\-]+) ");
SearchAndReplace.setReplaceString("$1    $2 ");
SearchAndReplace.replaceAll(view);
// -- prepend 2 figure spaces to \v after \q 
SearchAndReplace.setSearchString("^(\\\\q[^ ]* \\\\v )([0-9\\-][0-9\\-]) ");
SearchAndReplace.setReplaceString("$1   $2 ");
SearchAndReplace.replaceAll(view);
// -- prepend 1 figure spaces to \v after \q 
SearchAndReplace.setSearchString("^(\\\\q[^ ]* \\\\v )([0-9\\-]) ");
SearchAndReplace.setReplaceString("$1  $2 ");
SearchAndReplace.replaceAll(view);
// ================ Verse Markers ==========================
SearchAndReplace.setSearchString("\\\\v( * *[0-9\\-]+)( | | )");
SearchAndReplace.setReplaceString("<CharStyle:v>$1<CharStyle:_>$2<CharStyle:>");
SearchAndReplace.replaceAll(view);
// ==== No break spaces =====================================
// -- double slashes become spaces 
// -- after other spaces become no break in those paragraphs
SearchAndReplace.setSearchString("(^\\+)//(.+[^/]$)");
SearchAndReplace.setReplaceString("$1//$2//");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString(" (?=[^\\n]+//)");
SearchAndReplace.setReplaceString("~");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("//(?=[^\\n]+//)");
SearchAndReplace.setReplaceString(" ");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("(\\\\[^\\n]+?)~");
SearchAndReplace.setReplaceString("$1 ");
SearchAndReplace.replaceAll(view);
SearchAndReplace.setSearchString("//");
SearchAndReplace.setReplaceString("<pHyphenation:0>");
SearchAndReplace.replaceAll(view);
// ================ Figures ===============================
SearchAndReplace.setSearchString("^\\\\(\\S+) \\\\fig .*?([0-9]*)[x]+([0-9]*)\\|([^|]*)\\|([^|]*)[^\\\\]*\\\\fig\\*");
SearchAndReplace.setReplaceString("<ParaStyle:$5><TableStyle:fig><TableStart:1,1:0:0<tCellDefaultCellType:Text>><ColStart:<tColAttrWidth:$2>><RowStart:<tRowAttrHeight:$3><tRowAttrMinRowSize:$3>><CellStyle:\\[None\\]><StylePriority:0><CellStart:1,1><ParaStyle:$1>$4<CellEnd:><RowEnd:><TableEnd:>");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setWholeWord(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);
// ================= Paragraph Styles =======================
SearchAndReplace.setSearchString("^\\\\([^\\s]+?)( |$)");
SearchAndReplace.setReplaceString("<ParaStyle:$1>");
SearchAndReplace.replaceAll(view);
// ================= Footnotes =============================
SearchAndReplace.setSearchString("\\\\(ef|erq|ex|f|fdc|fe|fp|fs|x|xdc|xnt|xot)\\s(.)\\s(.+?)\\\\\\1\\*");
SearchAndReplace.setReplaceString("<CharStyle:$2><FootnoteStart:><ParaStyle:$1>$3<FootnoteEnd:><CharStyle:>");
SearchAndReplace.replaceAll(view);
// ================ Tables ================================
// ================ Character Styles ========================
SearchAndReplace.setSearchString("\\\\[^\\s]+\\*");
SearchAndReplace.setReplaceString("<CharStyle:>");
SearchAndReplace.replaceAll(view);
//=
SearchAndReplace.setSearchString("\\\\([^\\s]+) ");
SearchAndReplace.setReplaceString("<CharStyle:$1>");
SearchAndReplace.replaceAll(view);
// ================ Variable Text ==========================
SearchAndReplace.setSearchString("\\[\\{(.+?)\\}\\]");
SearchAndReplace.setReplaceString("<TextVarName:$1>");
SearchAndReplace.replaceAll(view);
// -- Tilde become nobreak spaces
SearchAndReplace.setSearchString("~");
SearchAndReplace.setReplaceString("\u00a0");
SearchAndReplace.replaceAll(view);
// ======================================================
// ===                           Rinse Cycle                                          ===
// ======================================================
// -- clean up blank lines
SearchAndReplace.setSearchString("\\n\\n+");
SearchAndReplace.setReplaceString(" \\n");
SearchAndReplace.replaceAll(view);
//-- clean up leading/trailing space
SearchAndReplace.setSearchString("(^ +| +$)");
SearchAndReplace.setReplaceString("");
SearchAndReplace.replaceAll(view);
// ======================================================
// ===    Manually Insert Indesign Stylesheet
// ======================================================
textArea.goToBufferStart(false);
caret = textArea.getCaretPosition();
    
    path = buffer.getPath();
    if (path == null)
        path = ".";
    else
        path = dirname (path);
    result = GUIUtilities.showVFSFileDialog(view, path, VFSBrowser.OPEN_DIALOG, false);
    if (result != null)
        buffer.insertFile (view, result[0]);
 